#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define ZMK_POINTING_DEFAULT_SCRL_VAL 80

// OS設定を日本語キーボードのまま使用するための変換定義

#define JP_DQUOTE       AT                // "
#define JP_AMPERSAND    CARET             // &
#define JP_QUOTE        AMPERSAND         // '
#define JP_EQUAL        UNDER             // =
#define JP_CARET        EQUAL             // ^
#define JP_YEN          0x89              // ¥
#define JP_PLUS         COLON             // +
#define JP_TILDE        PLUS              // ~
#define JP_PIPE         LS(0x89)          // |
#define JP_AT           LEFT_BRACKET      // @
#define JP_COLON        SINGLE_QUOTE      // :
#define JP_ASTERISK     DOUBLE_QUOTES     // *
#define JP_BACKQUOTE    LEFT_BRACE        // `
#define JP_UNDERSCORE   LS(0x87)          // _
#define JP_LBRACKET     RIGHT_BRACKET     // [
#define JP_RBRACKET     BACKSLASH         // ]
#define JP_LPAREN       ASTERISK          // (
#define JP_RPAREN       LEFT_PARENTHESIS  // )
#define JP_LBRACE       RIGHT_BRACE       // {
#define JP_RBRACE       PIPE              // }
#define JP_KANA         LANGUAGE_1        // かな
#define JP_EISU         LANGUAGE_2        // 英数
#define JP_HANZEN       GRAVE             // 半角/全角

&trackball {
    automouse-layer = <4>;
    scroll-layers = <5>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    combos {
        compatible = "zmk,combos";

        a {
            bindings = <&mkp MB1>;
            key-positions = <18 19>;
        };

        f {
            bindings = <&mkp MB2>;
            key-positions = <19 20>;
        };

        es {
            bindings = <&kp ESCAPE>;
            key-positions = <18 19 20>;
        };

        dfs {
            bindings = <&msc SCRL_UP>;
            key-positions = <6 7 8>;
        };

        dh {
            bindings = <&msc SCRL_DOWN>;
            key-positions = <30 31 32>;
        };

        wrty {
            bindings = <&kp LC(HOME)>;
            key-positions = <6 7 8 9>;
        };

        q3qr {
            bindings = <&kp LC(END)>;
            key-positions = <30 31 32 33>;
        };

        wt {
            bindings = <&kp LC(N0)>;
            key-positions = <18 19 20 21>;
        };

        jfdsa {
            bindings = <&kp LS(LG(S))>;
            key-positions = <10 11 12 13>;
        };

        arr {
            bindings = <&sl 3>;
            key-positions = <29 30>;
        };

        dfasdfas {
            bindings = <&sl 3>;
            key-positions = <26 25>;
        };

        zoom {
            bindings = <&kp LC(KP_PLUS)>;
            key-positions = <17 18 19>;
        };

        minus {
            bindings = <&kp LC(MINUS)>;
            key-positions = <29 30 31>;
        };

        buletooth {
            bindings = <&sl 6>;
            key-positions = <37 38 39>;
        };

        refresh {
            bindings = <&kp F5>;
            key-positions = <18 17 20 19>;
        };

        folder {
            bindings = <&kp LC(LS(N))>;
            key-positions = <29 30 31 32>;
        };

        new {
            bindings = <&kp LC(N)>;
            key-positions = <5 6 7 8>;
        };

        up {
            bindings = <&kp C_VOLUME_UP>;
            key-positions = <0 1 2 3>;
        };

        oolume {
            bindings = <&kp C_VOLUME_DOWN>;
            key-positions = <25 24 23 22>;
        };

        lkljklj {
            bindings = <&kp LC(PAGE_DOWN)>;
            key-positions = <8 7>;
        };

        jkoiunounn {
            bindings = <&kp LC(PAGE_UP)>;
            key-positions = <6 7>;
        };

        save2 {
            bindings = <&kp LS(LC(S))>;
            key-positions = <1 2>;
        };

        save {
            bindings = <&kp F12>;
            key-positions = <11 12>;
        };

        office {
            bindings = <&kp LC(F1)>;
            key-positions = <1 2 3>;
        };

        short {
            bindings = <&kp LA(LC(NUMBER_4))>;
            key-positions = <6 7 8 9 29>;
        };

        sho {
            bindings = <&kp LA(LC(NUMBER_3))>;
            key-positions = <29 18 19 20 21>;
        };

        shok {
            bindings = <&kp LA(LC(NUMBER_2))>;
            key-positions = <29 30 31 32 33>;
        };
    };

    behaviors {
        encoder_msc_down_up: encoder_msc_down_up {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENCODER_MSC_DOWN_UP";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_UP>, <&msc SCRL_DOWN>;

            tap-ms = <20>;
        };

        encoder_msc_left_right: encoder_msc_left_right {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENCODER_MSC_LEFT_RIGHT";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_LEFT>, <&msc SCRL_RIGHT>;

            tap-ms = <20>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q      &kp W         &kp E         &kp R      &kp T                                                                   &kp Y     &kp U  &kp I      &kp O       &kp P
&kp A      &kp S         &kp D         &kp F      &kp G                   &kp LC(N0)                     &kp DEL          &kp H     &kp J  &kp K      &kp L       &kp MINUS
&kp Z      &kp X         &kp C         &kp V      &kp B                   &kp LEFT_SHIFT                 &lt 2 BACKSPACE  &lt 1 N   &kp M  &kp COMMA  &kp PERIOD  &kp SLASH
&kp LCTRL  &kp LEFT_WIN  &kp LEFT_ALT  &lt 5 TAB  &mt INT_MUHENKAN SPACE  &mt LANGUAGE_2 LANGUAGE_1      &kp ENTER        &mkp MB1                                &kp LEFT_CONTROL
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        FUNCTION {
            bindings = <
&kp NUMBER_1  &kp NUMBER_2    &kp NUMBER_3    &kp NUMBER_4     &kp N5                       &kp LC(NUMBER_1)  &kp C_AC_BACK       &kp LG(UP_ARROW)    &kp LA(UP_ARROW)     &kp F5
&trans        &kp LEFT_ARROW  &kp UP_ARROW    &kp RIGHT_ARROW  &trans  &trans      &kp F13  &kp LC(NUMBER_2)  &kp LG(LEFT_ARROW)  &kp LG(D)           &kp LG(RIGHT_ARROW)  &kp SPACE
&trans        &trans          &kp DOWN_ARROW  &trans           &trans  &trans      &trans   &trans            &kp LEFT_ARROW      &kp LG(DOWN_ARROW)  &kp RIGHT_ARROW      &kp LC(W)
&trans        &trans          &trans          &trans           &trans  &trans      &trans   &trans                                                                         &kp LA(F4)
            >;

            sensor-bindings = <&encoder_msc_left_right>;
        };

        NUM {
            bindings = <
&kp NUMBER_1                &kp NUMBER_2     &kp NUMBER_3    &kp NUMBER_4     &kp N5                                                     &kp JP_PLUS   &kp N7        &kp N8        &kp N9        &kp N0
&kp SLASH                   &kp LEFT_ARROW   &kp UP_ARROW    &kp RIGHT_ARROW  &kp ASTERISK  &kp LC(LA(KP_NUMBER_0))      &kp UNDERSCORE  &kp MINUS     &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp KP_MULTIPLY
&mt LEFT_SHIFT KP_NUMBER_0  &kp KP_NUMBER_1  &kp DOWN_ARROW  &kp KP_NUMBER_3  &kp PERIOD    &kp EQUAL                    &trans          &kp KP_EQUAL  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp KP_DIVIDE
&trans                      &trans           &trans          &trans           &trans        &trans                       &trans          &trans                                                  &kp JP_UNDERSCORE
            >;
        };

        ARROW {
            bindings = <
&kp EXCLAMATION  &kp JP_DQUOTE           &kp HASH        &kp DOLLAR               &kp PERCENT                      &kp JP_AMPERSAND  &kp JP_QUOTE    &kp JP_LPAREN   &kp JP_RPAREN    &kp JP_EQUAL
&kp HOME         &kp LEFT_ARROW          &kp UP_ARROW    &kp RIGHT_ARROW          &kp END      &trans      &trans  &trans            &kp LEFT_ARROW  &kp UP_ARROW    &kp RIGHT_ARROW  &kp JP_AT
&kp LEFT_SHIFT   &kp LG(LS(LEFT_ARROW))  &kp DOWN_ARROW  &kp LG(LS(RIGHT_ARROW))  &trans       &trans      &trans  &trans            &trans          &kp DOWN_ARROW  &trans           &trans
&trans           &trans                  &trans          &trans                   &trans       &trans      &trans  &trans                                                             &kp JP_UNDERSCORE
            >;

            sensor-bindings = <&encoder_msc_left_right>;
        };

        kigou {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans         &trans        &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &kp SEMICOLON  &kp JP_COLON  &kp JP_LBRACE
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans         &trans        &kp JP_RBRACE
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                       &kp JP_UNDERSCORE
            >;

            sensor-bindings = <&encoder_msc_left_right>;
        };

        fun {
            bindings = <
&trans  &trans          &trans          &trans           &trans                      &trans  &kp F7  &kp F8  &kp F9  &kp F10
&trans  &kp LEFT_ARROW  &kp UP_ARROW    &kp RIGHT_ARROW  &trans  &trans      &trans  &trans  &kp F4  &kp F5  &kp F6  &kp F11
&trans  &trans          &kp DOWN_ARROW  &trans           &trans  &trans      &trans  &trans  &kp F1  &kp F2  &kp F3  &kp F12
&trans  &trans          &trans          &trans           &trans  &trans      &trans  &trans                          &kp JP_UNDERSCORE
            >;

            sensor-bindings = <&encoder_msc_left_right>;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                              &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &bt BT_CLR_ALL  &trans         &bt BT_PRV     &trans         &bt BT_NXT     &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bt BT_CLR      &bt BT_DISC 0  &bt BT_DISC 1  &bt BT_DISC 3  &bt BT_DISC 3  &bt BT_DISC 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans          &trans                                                      &bt BT_CLR_ALL
            >;

            sensor-bindings = <&encoder_msc_left_right>;
        };
    };
};
